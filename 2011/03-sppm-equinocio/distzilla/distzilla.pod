=encoding utf8

=head1 Oh no!! It's Dist::Zilla!!

E seus sanguinários amigos Pod::Weaver e Git-Flow.

=head2 O que nós fizemos para merecer isso?

A manutenção de um módulo Perl é cheia de tarefas repetitivas: configurar
o C<Makefile.PL>, atualizar documentação, atualizar versão de dependências,
copiar as mais diversas suítes de testes para a árvore, formatar o código,
"I<commitar>" o código do controle de versão - eventualmente aplicar I<tags>
nesse controle de versão e, por fim, fazer o I<upload> do módulo para o
L<PAUSE|http://pause.perl.org/>.

Especificamente do ponto de vista de documentação, há a chata tarefa de
atualizar a versão do módulo em todos os arquivos que fazem parte dele - 
se forem muitos, a chateação também será muita. 
Adicionar seções com informações "repetidas", como B<AUTHOR>, B<LICENSE>,
B<SUPPORT>, entre outros, também algo repetitivo e sujeito a erros bobos
se feito manualmente. Alguns módulos fornecem um arquivo C<README> que é a
renderização em texto do POD do arquivo principal do módulo - também é uma
tarefa que poderia ser facilmente automatizada.

Por fim, quando estamos trabalhando em equipe, precisamos ter um maior cuidado
com o sistema de controle de versões, criando I<branches> edpecíficos para 
times e/ou tarefas específicas, e realizando o I<merge> dos mesmos depois.
O sistema de controle de versão que, se ainda não é, está se tornando o mais
popular na comunidade Perl (e de outras lingaugens também) é o 
L<git|http://git-scm.com/>, I<software> originalmente escrito pelo próprio 
L<Linus Torvalds|http://en.wikipedia.org/wiki/Linus_Torvalds>. As principais
vantagens do B<git> são:

=over

=item *
Sistema distribuído: não é necessário realizar todas as operações contra um
repositório central.

=item *
Facilidade para fazer I<branch>es e I<merge>s: o B<git> permite criar branches
novos de desenvolvimento e realizar o merge dos mesmos com rapidez e segurança.

=item *
Software Livre e Aberto: o B<git> é B<Free Software>, B<Open Source>. Os fontes
do B<git> estão L<disponíveis publicamente|https://github.com/git/git>.

=back

O B<git> viabilizou serviços como o L<github|http://github.com>, um serviço de
hospedagem de repositórios B<git>, onde pode-se manter repositórios públicos
gratuitamente.

No entanto, não basta ter somente a ferramenta adequada, é preciso ter uma
B<metodologia> que atenda às nossas necessidades.

=head2 E agora, quem irá nos defender?

L<Ricardo Signes, (RJBS)|http://rjbs.manxome.org/>, desenvolvedor
norte-americano, membro atuante da comunidade Perl, com
L<dezenas de módulos|http://search.cpan.org/~rjbs/> publicados no 
L<CPAN|http://www.cpan.org/>, começou em
L<Maio de 2008(?)|https://github.com/rjbs/dist-zilla/commit/f3854f7c675a11c6b3832dc111f72e6d705c09fa>
um projeto ambicioso, o L<Dist::Zilla>. O Dist::Zilla, como descrito em
L<seu site|http://dzil.org/>, é um "programa para facilitar a escrita, o
empacotamento, o gerenciamento e a publicação de software livre". Para nós
programadores ferrenhos e batalhadores cotidianos, isso significa: menos
tempo gasto com códigos, arquivos e configurações I<boilerplate>, e mais tempo
disponível para dedicar-se à codificação propriamente dita. Naturalmente, aqui,
estamos falando de Perl - iremos usar o Dist::Zilla para escrever
módulos e/ou aplicativos em Perl.

Este artigo não pretende ser um guia completo sobre o Dist::Zilla. Para uma
documentação mais abrangente, sugerimos ler 
L<os tutoriais do Dist::Zilla|http://dzil.org/tutorial/start.html>. Vamos
mostrar aqui o básico, e um pouco além.

=head3 O que faz?

O Dist::Zilla permite várias ações. Para executar essas ações, usamos a
aplicação de linha de comando que vem com o Dist::Zilla, que é o comando
C<dzil>. Alguns dos usos mais freqüentes:

Rode:

	$ dzil test
	[DZ] building test distribution under .build/nQGOr0w7RL
	...

para executar todos os testes do módulo. Ou:

	$ dzil build
	...

para gerar um I<build> do módulo. Ou mesmo:

	$ dzil release
	...

para fazer um build, (tipicamente) rodar todos os testes e, (idem) fazer o 
I<upload> do módulo para o CPAN.

=head3 Como começar?

O Dist::Zilla é controlado pelas configurações em arquivos ".ini", tanto
para configurações do usuário quanto para configurações do projeto.

Para poder ter o Dist::Zilla funcionando, você deve, antes de mais nada,
instalá-lo:

	$ cpan Dist::Zilla

Uma vez que o C<cpan> termine a instalação, você terá disponível o comando
C<dzil> no seu I<shell>. É preciso então fazer um I<setup> do Dist::Zilla:

	dzil setup

Esse comando irá gerar um arquivo C<< ~/.dzil/config.ini >>, contendo as
informações solicitadas. Por exemplo:

	[%User]
	name  = Alexei Znamensky
	email = russoz@cpan.org
	
	[%Rights]
	license_class    = Perl_5
	copyright_holder = Alexei Znamensky

Note que o C<dzil setup> perguntou sobre usuário e senha do CPAN. Caso você
escolha por colocar essa informação no Dist::Zilla, ela estará presente no
C<config.ini>. Opcionalmente você pode colocar essa informação separadamente
no arquivo C<< ~/.pause >>:

	user russoz
	password p0t@toe5

Isso é opcional, mas, naturalmente, não será possível fazer o upload do módulo
para o CPAN sem essa informação.

Com isso você já está pronto para usar o Dist::Zilla no seu módulo.

=head3 Convertendo um módulo

Vamos exemplificar o uso do Dist::Zilla com a conversão de um módulo, pois fica
mais fácil de visualizar o que substitui o quê. Esta seção é adaptada do
tutorial escrito pelo próprio RJBS sobre
L<conversão de um módulo|http://dzil.org/tutorial/convert-dist.html>.

No começo deste ano este autor se tornou co-mantenedor do módulo
L<Queue::Base>. Além de alguns ajustes no código do módulo, o Queue::Base foi
utilizado como cobaia para a conversão para Dist::Zilla.

Para começarmos a utilizar o Dist::Zilla, precisamos criar, no diretório raiz
da distribuição/módulo/aplicação, um arquivo C<dist.ini>. i

Basicamente os passos para conversão foram:

=head4 Eliminando o Makefile.PL

O C<Makefile.PL> continha o seguinte código:

	use inc::Module::Install;
	
	name     'Queue-Base';
	all_from 'lib/Queue/Base.pm';
	author   q{Alexei Znamensky <russoz@cpan.org>};
	license  'perl';
	
	requires 'version' => 0.77;
	
	build_requires 'Test::More';
	
	auto_install;
	
	WriteAll;

Esse arquivo pode ser removido. Não será mais necessário.
Ao invés dele, teremos um C<dist.init>:

	name    = Queue-Base
	version = 2.0_2
	author  = Farkas Arpad <arpadf@cpan.org>
	author  = Alexei Znamensky <russoz@cpan.org>
	license = Perl_5
	copyright_holder = Alexei Znamensky

	[GatherDir]
	[MetaYAML]
	[ModuleInstall]        <<<<<<<<< AQUI
	[Manifest]
	...

Um C<dist.ini> irá conter seções e definições, como informações sobre o módulo
e o autor.

Notem nesse trecho anotado do 
L<< primeiro C<dist.ini> do Queue::Base | https://github.com/russoz/Queue-Base/blob/3702c381595c0dfa6e7644bd945987b95af2e20c/dist.ini >>, que colocamos uma
seção do C<dist.ini> na qual especificamos o uso do L<Module::Install>.

Todos esses nomes de seções (com exceção aos que começarem com "@" e outros
que contém uma barra "/"), correspondem a classes no I<namespace>
C<Dist::Zilla::Plugin::>, isto é, no trecho acima estamos referenciando as
classes:

=over

=item *
L<Dist::Zilla::Plugin::GatherDir>

=item *
L<Dist::Zilla::Plugin::MetaYAML>

=item *
L<Dist::Zilla::Plugin::ModuleInstall>

=item *
L<Dist::Zilla::Plugin::Manifest>

=back

Dessas quatro classes, L<Dist::Zilla::Plugin::ModuleInstall> não faz parte do
próprio Dist::Zilla, ele foi desenvolvido
L<Kent Fredric|http://search.cpan.org/~kentnl/>.

=head4 Eliminando outros arquivos

Existem vários I<plugins> prontos, para realizar umai
L<< infinidade de diferentes tarefas | http://search.cpan.org/search?query=Dist::Zilla::Plugin&mode=all >>. Destacamos aqui alguns mais importantes:

	[GatherDir]     - lista os arquivos
	[Manifest]      - gera arquivo MANIFEST
	[Readme]        - gera arquivo README
	[License]       - gera arquivo LICENSE
	[MakeMaker]     - gera um Makefile.PL (ExtUtils::MakeMaker)
	[ModuleInstall] - idem (Module::Install)
	[ModuleBuild]   - gera um Build.PL (Module::Build)
	[PreReqs]       - permite especificar dependências
	[AutoPrereqs]   - detecta dependências automaticamente
	[PodVersion]	- acrescenta VERSION a cada arquivo .pm
	[OurPodVersion] - idem, usando our $VERSION

A lista completa seria finita, mas enorme. Para facilitar um pouco a nossa
vida, existem os I<bundles>, que agrupam vários I<plugins> em uma única
seção. O mais imediato é o C<Basic>, que é fornecido pelo próprio Dist::Zilla.
Para usá-lo, basta colocar no C<dist.ini>:

	[@Basic]

Esse I<bundle> é definido na classe L<Dist::Zilla::PluginBundle::Basic>, e
corresponde aos I<plugins>:

	[GatherDir]
	[PruneCruft]
	[ManifestSkip]
	[MetaYAML]
	[License]
	[Readme]
	[ExtraTests]
	[ExecDir]
	[ShareDir]
	[MakeMaker]
	[Manifest]
	[TestRelease]
	[ConfirmRelease]
	[UploadToCPAN]

Utilizando o C<< [@Basic] >> podemos (devemos!) remover os arquivos: 
C<README>, C<LICENSE>, C<MANIFEST> e, se estivermos usando o Module::Install,
podemos também remover o diretório C<inc/> - ele será gerado automaticamente
durante o I<build> com os arquivos necessários.

=head4 Caçando Plugins

Alguns dos I<plugins> utilizados podem não estar instalados. Para saber quais
I<plugins> você precisa instalar, basta rodar:

	dzil authordeps

É possível criar novos I<bundles>, e é uma prática comum que os autores criem
I<bundles> com seus grupos de I<plugins> prediletos.

Existem I<plugins> que realizam a mesma tarefa que algum I<plugin> que faz 
parte de um I<bundle>. Nesse caso, o I<plugin> declarado no I<bundle> será
ignorado e o I<plugin> declarado no C<dist.ini> será utilizado.

=head2 Será que POD?

=head2 Go git, flow!

Em 15 de Janeiro de 2010, Vincent Driessen, um desenvolver holandês, publicou
em seu L<blog|http://nvie.com/> um modelo de desenvolvimento que ele utilizava
em seus projetos (tanto no trabalho quanto pessoais), baseado no uso de alguns
padrões de criação e junção de I<branches> no B<git>.

=head2 Conclusão


=head2 Referências


=head2 Agradecimentos

=head2 Autor

B<< Alexei "Russo" Znamensky E<lt> russoz no cpan org E<gt> >>

=over

=item *
Twitter: L<russoz|http://twitter.com/#!/russoz>

=item *
Blog: L<http://russoz.wordpress.com/>

=item *
LinkedIn:
L<http://www.linkedin.com/profile?viewProfile=&key=754668&trk=tab_pro>

=back

=head2 Licença

Este texto está licenciado sob os termos da Creative Commons by-sa,
L<http://creativecommons.org/licenses/by-sa/3.0/br/>

=begin pod:xhtml

<center>
<a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/br/"><img alt="Licença Creative Commons" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/br/">Creative Commons Attribution-ShareAlike License</a>.
</center>

=end pod:xhtml

=cut

